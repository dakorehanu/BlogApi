package com.Phoenix.blogApis.Controller;

import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.Phoenix.blogApis.Api_constants.ApiConstants;
import com.Phoenix.blogApis.Payloads.ApiResponse;
import com.Phoenix.blogApis.Payloads.UserDTO;
import com.Phoenix.blogApis.Service.Impl.UserServiceImpl;


@RestController
@RequestMapping("/api")
public class UserController {

	@Autowired
	public UserServiceImpl userServiceImpl;	
	
	Logger logger=LoggerFactory.getLogger(UserController.class);
	
	
	/**
	 * @author Raviraj Patil
	 * @apiNote Create Users
	 * @since 1.0
	 * @param userDto
	 * @return UserDTO
	 */
	@PostMapping(value="/users")
	public ResponseEntity<UserDTO> createUser(@RequestBody UserDTO userDto){
		logger.info("Entering the request for save User Data");
		UserDTO createUser = userServiceImpl.createUser(userDto);
		logger.info("Completing the request for save User Data");
		
		return new ResponseEntity<UserDTO>(createUser,HttpStatus.CREATED);
	}
	
	
	
	
	/**
	 * @author Raviraj Patil
	 * @param userDto
	 * @param id
	 * @apiNote Update User
	 * @return UserDTO
	 */
	@PutMapping("/users{userId}")
	public ResponseEntity<UserDTO> updateuser
			(@RequestBody UserDTO userDto,
			 @PathVariable Integer userId)
	{
		logger.info("Entering the request to update  User Data with {}:",userId);
		UserDTO updateUser = this.userServiceImpl.updateUser(userDto, userId);
		logger.info("Completed the request to update User Data with {}:",userId);
		
		return new ResponseEntity<UserDTO>(updateUser,HttpStatus.CREATED);
	}
	
	
	
	/**
	 * @author Raviraj Patil
	 * @apiNote Get user by ID
	 * @param id
	 * @return UserDTO
	 */
	@GetMapping("/users{userId}")
	public ResponseEntity<UserDTO> getUserById(@PathVariable Integer userId){
		logger.info("Entering the request for get User Data with {}:", userId); 
		UserDTO userById = this.userServiceImpl.getUserById(userId);
		logger.info("Completed the request for get User Data with {}:", userId);
		return new ResponseEntity<UserDTO>(userById,HttpStatus.FOUND);
	}
	
	
	
	
	/**
	 * @author Raviraj Patil
	 * @apiNote Get_all_Users
	 * @since 1.0
	 * @return List<UserDTO>
	 */
	@GetMapping("/users")
	public ResponseEntity<List<UserDTO>> getAllUsers(){
		logger.info("Entering the request for get all Users Data");
		List<UserDTO> getallUsers = this.userServiceImpl.getallUsers();
		logger.info("Completed the request for get All Users Data");
		return new ResponseEntity<List<UserDTO>>(getallUsers,HttpStatus.FOUND);	
	}
	
	
	
	
	
	
	/**
	 * @author Raviraj Patil
	 * @apiNote Delete User
	 * @param id
	 * @return ApiResponse
	 */
	@DeleteMapping("/users{userId}")
	public  ResponseEntity<ApiResponse> deleteuser(@PathVariable Integer userId){
		logger.info("Entering the request to delete  User Data with {}:",userId);
		this.userServiceImpl.deleteUser(userId);
		logger.info("Completed the request to delete User Data with {}:",userId );
		return new ResponseEntity<ApiResponse>(new ApiResponse(ApiConstants.DELETE_USER, true),HttpStatus.OK);
		
	}
	
	/**
	 * @author Raviraj Patil
	 * @apiNote  Pathch User
	 * @implNote
	 */
	@GetMapping("/")
	public ResponseEntity<String> getMessage()
{
		String s="Hanuman";
	return new ResponseEntity<String>(s,HttpStatus.FOUND);
		
	}
	
	
}
